<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/aop   
            			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            			http://www.springframework.org/schema/tx 
            			http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<aop:aspectj-autoproxy />
	
	<bean id="propertyConfig" 
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="location"> 
			<value>classpath:prop/database.properties</value> 
		</property> 
	</bean>
	
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName">
			<value>${driverClassName}</value>
		</property>
		<property name="url">
			<value>${url}</value>
		</property>
		<property name="username">
			<value>${username}</value>
		</property>
		<property name="password">
			<value>${password}</value>
		</property>
		<property name="initialSize">
			<value>${initialSize}</value>
		</property> 
	    <property name="minIdle">
			<value>${minIdle}</value>
		</property>  
	    <property name="maxIdle">
			<value>${maxIdle}</value>
		</property>   
	    <property name="maxActive">
			<value>${maxActive}</value>
		</property>    
	    <property name="maxWait">
			<value>${maxWait}</value>
		</property>  
	</bean>
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					com.nkl.common.util.ZCMySQLDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop> 
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>com/nkl/admin/domain/User.hbm.xml</value>
				<value>com/nkl/admin/domain/Attend.hbm.xml</value>
				<value>com/nkl/admin/domain/Config.hbm.xml</value>
				<value>com/nkl/admin/domain/Dept.hbm.xml</value>
				<value>com/nkl/admin/domain/Fill.hbm.xml</value>
				<value>com/nkl/admin/domain/Holiday.hbm.xml</value>
				<value>com/nkl/admin/domain/Leave.hbm.xml</value>
				<value>com/nkl/admin/domain/Post.hbm.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类实现PlatformTransactionManager接口，是针对Hibernate的特定实现-->
	<bean id="transactionManager" class=
		"org.springframework.orm.hibernate3.HibernateTransactionManager">
		<!-- 配置HibernateTransactionManager时需要依注入SessionFactory的引用 -->
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<!-- 配置事务切面Bean,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<!-- 所有以'get'开头的方法是read-only的 -->
			<tx:method name="get*" read-only="true"/>
			<!-- 其他方法使用默认的事务设置 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!-- 配置一个切入点，匹配com.qcsz.*.biz包下所有方法的执行 -->
		<aop:pointcut id="meetPointcut" expression="execution(* com.nkl.*.manager.*.*(..))" /> 
		<!-- 指定在txAdvice切入点应用txAdvice事务切面 -->
		<aop:advisor advice-ref="txAdvice" 
			pointcut-ref="meetPointcut"/>
	</aop:config>
	
	<!-- 定义DAO组件模板 -->
	<bean id="daoTemplate" abstract="true" lazy-init="true">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 定义各个普通DAO-->
	<bean id="userDao"
		class="com.nkl.admin.dao.UserDao" parent="daoTemplate"/>
	<bean id="attendDao"
		class="com.nkl.admin.dao.AttendDao" parent="daoTemplate"/>
	<bean id="configDao"
		class="com.nkl.admin.dao.ConfigDao" parent="daoTemplate"/>
	<bean id="deptDao"
		class="com.nkl.admin.dao.DeptDao" parent="daoTemplate"/>
	<bean id="fillDao"
		class="com.nkl.admin.dao.FillDao" parent="daoTemplate"/>
	<bean id="holidayDao"
		class="com.nkl.admin.dao.HolidayDao" parent="daoTemplate"/>
	<bean id="leaveDao"
		class="com.nkl.admin.dao.LeaveDao" parent="daoTemplate"/>
	<bean id="postDao"
		class="com.nkl.admin.dao.PostDao" parent="daoTemplate"/>
	
	<!-- 定义业务逻辑组件模板 -->
    <bean id="managerTemplate" abstract="true" lazy-init="true">
		<!-- 为业务逻辑组件注入DAO组件 -->
        <property name="userDao" ref="userDao"/>
        <property name="configDao" ref="configDao"/>
        <property name="attendDao" ref="attendDao"/>
        <property name="deptDao" ref="deptDao"/>
        <property name="fillDao" ref="fillDao"/>
        <property name="holidayDao" ref="holidayDao"/>
        <property name="leaveDao" ref="leaveDao"/>
        <property name="postDao" ref="postDao"/>
	</bean>
	
	<!-- 定义各个普通业务逻辑组件-->
	<bean id="adminManager" class="com.nkl.admin.manager.AdminManager" scope="prototype"  parent="managerTemplate"/>
	<bean id="loginManager" class="com.nkl.admin.manager.LoginManager" scope="prototype">
		<property name="userDao" ref="userDao"/>
	</bean>
	
	</beans>